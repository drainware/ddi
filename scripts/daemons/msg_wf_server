#!/bin/bash
#

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/opt/drainware/bin:/opt/drainware/sbin
DAEMON=/opt/drainware/scripts/ddi/msg_wf_server.py
NAME=msg_wf_server
DESC=msg_wf_server

test -x $DAEMON || exit 0

LOGDIR=/opt/drainware/var/log/msg_wf_server
PIDFILE=/opt/drainware/var/run/$NAME.pid
DODTIME=3            # Time to wait for the server to die, in seconds
			    # If this value is set too low you might not
			    # let some servers to die gracefully and
			    # 'restart' will not work
STARTUPTIME=1	    # Time to wait to decide if daemon is up and running


set -e

check_pidfile_process(){
    if [ -f "$PIDFILE" ]
    then
        pid=`cat $PIDFILE`
        if [ ! -d /proc/$pid ] 
	then
	    rm $PIDFILE
	fi
    fi
    return 0
}

running_pid() {
    # Check if a given process pid's cmdline matches a given name
    pid=$1
    name=$2
    [ -z "$pid" ] && return 1
    [ ! -d /proc/$pid ] &&  return 1
    cmd=`cat /proc/$pid/cmdline | tr "\000" "\n" | sed -n 2p`
    # Is this the expected child?
    [ "$cmd" != "$name" ] &&  return 1
    return 0
}

running() {
# Check if the process is running looking at /proc
# (works for all users)
    # No pidfile, probably no daemon present
    [ ! -f "$PIDFILE" ] && return 1
    # Obtain the pid and check it against the binary name
    pid=`cat $PIDFILE`
    running_pid $pid $DAEMON || return 1
    return 0
}

force_stop() {
# Forcefully kill the process
    [ ! -f "$PIDFILE" ] && return
    if running ; then
	kill -15 $pid
	# Is it really dead?
	[ -n "$DODTIME" ] && sleep "$DODTIME"s
	if running ; then
	    kill -9 $pid
	    [ -n "$DODTIME" ] && sleep "$DODTIME"s
	    if running ; then
		echo "Cannot kill $LABEL (pid=$pid)!"
		exit 1
	    fi
	fi
    fi
    rm -f $PIDFILE
    return 0
}


# Carry out specific functions when asked to by the system
case "$1" in
    start)
        echo -n "Starting $NAME..."
	check_pidfile_process
        start-stop-daemon --background  --pidfile $PIDFILE  --start --exec $DAEMON -- --pidfile $PIDFILE
        [ -n "$STARTUPTIME" ] && sleep "$STARTUPTIME"s
        if running ; then
	    echo "OK."
        else
	    echo " ERROR."
        fi
        ;;
    stop)
        if [ -f $PIDFILE ] 
        then
            echo -n "Stopping $NAME..."
	    start-stop-daemon --pidfile $PIDFILE  --stop
            echo -n "."
            rm $PIDFILE
            echo -n ". "
            echo "OK"
        else
	    echo "$NAME is not running."
        fi
        ;;
    force-stop)
        echo -n "Forcefully stopping $NAME: "
        force_stop
        if ! running ; then
            echo "OK."
        else
            echo " ERROR."
        fi
        ;;	
    status)
        echo -n "$NAME is "
        if running ;  then
            echo "running."
        else
            echo " not running."
            exit 1
	fi
        ;;
    *)
        N=/etc/init.d/$NAME
        echo "Usage: $N {start|stop|status|force-stop}"
        exit 1
        ;;
esac

exit 0

